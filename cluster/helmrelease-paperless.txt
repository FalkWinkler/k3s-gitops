NAME: paperless
LAST DEPLOYED: Sun Sep 18 06:54:13 2022
NAMESPACE: document
STATUS: failed
REVISION: 5
TEST SUITE: None
USER-SUPPLIED VALUES:
controller:
  replicas: 1
env:
  PAPERLESS_ADMIN_PASSWORD:
    valueFrom:
      secretKeyRef:
        key: PAPERLESS_ADMIN_PASSWORD
        name: paperless-secrets
  PAPERLESS_ADMIN_USER: admin
  PAPERLESS_CONSUMER_DELETE_DUPLICATES: "true"
  PAPERLESS_CONSUMER_RECURSIVE: "true"
  PAPERLESS_FILENAME_DATE_ORDER: YMD
  PAPERLESS_FILENAME_FORMAT: '{document_type}/{correspondent}/{created_year}'
  PAPERLESS_OCR_LANGUAGE: deu
  PAPERLESS_OCR_LANGUAGES: deu eng
  PAPERLESS_REDIS: redis://redis-master.database:6379
  PAPERLESS_TASK_WORKERS: 4
  PAPERLESS_THREADS_PER_WORKER: 10
  PAPERLESS_TIKA_ENABLED: 1
  PAPERLESS_TIKA_ENDPOINT: http://tika:9998
  PAPERLESS_TIME_ZONE: Europe/Berlin
  USERMAP_GID: 1000
  USERMAP_UID: 1000
fullnameOverride: paperless
global:
  nameOverride: paperless
image:
  repository: ghcr.io/paperless-ngx/paperless-ngx
  tag: 1.8.0
ingress:
  main:
    annotations:
      external-dns.alpha.kubernetes.io/hostname: dokumente.k3s.home.lan
    enabled: true
    hosts:
    - host: dokumente.k3s.home.lan
      paths:
      - path: /
        pathType: Prefix
        service:
          port: 80
    ingressClassName: nginx
nameOverride: paperless
persistence:
  consume:
    accessMode: ReadWriteOnce
    enabled: true
    mountPath: /usr/src/paperless/consume
    path: /mnt/Volume1/document/consume
    server: 192.168.10.10
    type: nfs
  data:
    accessMode: ReadWriteOnce
    enabled: true
    path: /mnt/Volume1/document/data
    server: 192.168.10.10
    type: nfs
  export:
    accessMode: ReadWriteOnce
    enabled: true
    mountPath: /usr/src/paperless/export
    path: /mnt/Volume1/document/export
    server: 192.168.10.10
    type: nfs
  media:
    accessMode: ReadWriteOnce
    enabled: true
    path: /mnt/Volume1/document/media
    server: 192.168.10.10
    type: nfs
service:
  main:
    externalTrafficPolicy: Local
    loadBalancerIP: 192.168.10.222
    ports:
      http:
        port: 80
    type: LoadBalancer

COMPUTED VALUES:
common:
  additionalContainers: {}
  addons:
    codeserver:
      args:
      - --auth
      - none
      enabled: false
      env: {}
      git:
        deployKey: ""
        deployKeyBase64: ""
        deployKeySecret: ""
      image:
        pullPolicy: IfNotPresent
        repository: ghcr.io/coder/code-server
        tag: 4.7.0
      ingress:
        annotations: {}
        enabled: false
        hosts:
        - host: code.chart-example.local
          paths:
          - path: /
            pathType: Prefix
        labels: {}
        tls: []
      securityContext:
        runAsUser: 0
      service:
        annotations: {}
        enabled: true
        labels: {}
        ports:
          codeserver:
            enabled: true
            port: 12321
            protocol: TCP
            targetPort: codeserver
        type: ClusterIP
      volumeMounts: []
      workingDir: ""
    netshoot:
      enabled: false
      env: {}
      image:
        pullPolicy: IfNotPresent
        repository: ghcr.io/nicolaka/netshoot
        tag: v0.7
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
    promtail:
      args: []
      enabled: false
      env: {}
      image:
        pullPolicy: IfNotPresent
        repository: docker.io/grafana/promtail
        tag: 2.6.1
      logs: []
      loki: ""
      securityContext:
        runAsUser: 0
      volumeMounts: []
    vpn:
      additionalVolumeMounts: []
      args: []
      enabled: false
      env: {}
      gluetun:
        image:
          pullPolicy: IfNotPresent
          repository: docker.io/qmcgaw/gluetun
          tag: v3.31.1
      livenessProbe: {}
      networkPolicy:
        annotations: {}
        enabled: false
        labels: {}
        podSelectorLabels: {}
      scripts: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_MODULE
      type: gluetun
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
  command: []
  configmap:
    config:
      annotations: {}
      data: {}
      enabled: false
      labels: {}
  controller:
    annotations: {}
    enabled: true
    labels: {}
    replicas: 1
    revisionHistoryLimit: 3
    rollingUpdate: {}
    type: deployment
  dnsConfig: {}
  enableServiceLinks: true
  envFrom: []
  global:
    annotations: {}
    labels: {}
    nameOverride: paperless
  hostAliases: []
  hostNetwork: false
  image: {}
  imagePullSecrets: []
  ingress:
    main:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: Prefix
          service:
            name: null
            port: null
      labels: {}
      primary: true
      tls: []
  initContainers: {}
  lifecycle: {}
  nodeSelector: {}
  persistence:
    config:
      accessMode: ReadWriteOnce
      enabled: false
      readOnly: false
      retain: false
      size: 1Gi
      type: pvc
    shared:
      enabled: false
      mountPath: /shared
      type: emptyDir
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  probes:
    liveness:
      custom: false
      enabled: true
      spec:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
    readiness:
      custom: false
      enabled: true
      spec:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
    startup:
      custom: false
      enabled: true
      spec:
        failureThreshold: 30
        initialDelaySeconds: 0
        periodSeconds: 5
        timeoutSeconds: 1
  resources: {}
  secret: {}
  securityContext: {}
  service:
    main:
      annotations: {}
      enabled: true
      ipFamilies: []
      labels: {}
      monitor:
        enabled: false
        endpoints:
        - interval: 1m
          path: /metrics
          port: http
          scheme: http
          scrapeTimeout: 10s
      ports:
        http:
          enabled: true
          primary: true
          protocol: HTTP
      primary: true
      type: ClusterIP
  serviceAccount:
    annotations: {}
    create: false
    name: ""
  termination: {}
  tolerations: []
  topologySpreadConstraints: []
  volumeClaimTemplates: []
controller:
  replicas: 1
env:
  PAPERLESS_ADMIN_PASSWORD:
    valueFrom:
      secretKeyRef:
        key: PAPERLESS_ADMIN_PASSWORD
        name: paperless-secrets
  PAPERLESS_ADMIN_USER: admin
  PAPERLESS_CONSUMER_DELETE_DUPLICATES: "true"
  PAPERLESS_CONSUMER_RECURSIVE: "true"
  PAPERLESS_FILENAME_DATE_ORDER: YMD
  PAPERLESS_FILENAME_FORMAT: '{document_type}/{correspondent}/{created_year}'
  PAPERLESS_OCR_LANGUAGE: deu
  PAPERLESS_OCR_LANGUAGES: deu eng
  PAPERLESS_REDIS: redis://redis-master.database:6379
  PAPERLESS_TASK_WORKERS: 2
  PAPERLESS_THREADS_PER_WORKER: 2
  PAPERLESS_TIKA_ENABLED: 1
  PAPERLESS_TIKA_ENDPOINT: http://tika:9998
  PAPERLESS_TIME_ZONE: Europe/Berlin
  USERMAP_GID: 1000
  USERMAP_UID: 1000
fullnameOverride: paperless
global:
  nameOverride: paperless
image:
  repository: ghcr.io/paperless-ngx/paperless-ngx
  tag: 1.8.0
ingress:
  main:
    annotations:
      external-dns.alpha.kubernetes.io/hostname: dokumente.k3s.home.lan
    enabled: true
    hosts:
    - host: dokumente.k3s.home.lan
      paths:
      - path: /
        pathType: Prefix
        service:
          port: 80
    ingressClassName: nginx
nameOverride: paperless
persistence:
  consume:
    accessMode: ReadWriteOnce
    enabled: true
    mountPath: /usr/src/paperless/consume
    path: /mnt/Volume1/document/consume
    server: 192.168.10.10
    type: nfs
  data:
    accessMode: ReadWriteOnce
    enabled: true
    path: /mnt/Volume1/document/data
    server: 192.168.10.10
    type: nfs
  export:
    accessMode: ReadWriteOnce
    enabled: true
    mountPath: /usr/src/paperless/export
    path: /mnt/Volume1/document/export
    server: 192.168.10.10
    type: nfs
  media:
    accessMode: ReadWriteOnce
    enabled: true
    path: /mnt/Volume1/document/media
    server: 192.168.10.10
    type: nfs
service:
  main:
    externalTrafficPolicy: Local
    loadBalancerIP: 192.168.10.222
    ports:
      http:
        port: 80
    type: LoadBalancer

HOOKS:
MANIFEST:
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless
    app.kubernetes.io/service: paperless
    helm.sh/chart: app-template-0.2.1
    helm.toolkit.fluxcd.io/name: paperless
    helm.toolkit.fluxcd.io/namespace: document
  name: paperless
spec:
  externalTrafficPolicy: Local
  loadBalancerIP: 192.168.10.222
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: paperless
    app.kubernetes.io/name: paperless
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless
    helm.sh/chart: app-template-0.2.1
    helm.toolkit.fluxcd.io/name: paperless
    helm.toolkit.fluxcd.io/namespace: document
  name: paperless
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: paperless
      app.kubernetes.io/name: paperless
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: paperless
        app.kubernetes.io/name: paperless
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: PAPERLESS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PAPERLESS_ADMIN_PASSWORD
              name: paperless-secrets
        - name: PAPERLESS_ADMIN_USER
          value: admin
        - name: PAPERLESS_CONSUMER_DELETE_DUPLICATES
          value: "true"
        - name: PAPERLESS_CONSUMER_RECURSIVE
          value: "true"
        - name: PAPERLESS_FILENAME_DATE_ORDER
          value: YMD
        - name: PAPERLESS_FILENAME_FORMAT
          value: '{document_type}/{correspondent}/{created_year}'
        - name: PAPERLESS_OCR_LANGUAGE
          value: deu
        - name: PAPERLESS_OCR_LANGUAGES
          value: deu eng
        - name: PAPERLESS_REDIS
          value: redis://redis-master.database:6379
        - name: PAPERLESS_TASK_WORKERS
          value: "2"
        - name: PAPERLESS_THREADS_PER_WORKER
          value: "2"
        - name: PAPERLESS_TIKA_ENABLED
          value: "1"
        - name: PAPERLESS_TIKA_ENDPOINT
          value: http://tika:9998
        - name: PAPERLESS_TIME_ZONE
          value: Europe/Berlin
        - name: USERMAP_GID
          value: "1000"
        - name: USERMAP_UID
          value: "1000"
        image: ghcr.io/paperless-ngx/paperless-ngx:1.8.0
        imagePullPolicy: null
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 0
          periodSeconds: 10
          tcpSocket:
            port: 80
          timeoutSeconds: 1
        name: paperless
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 0
          periodSeconds: 10
          tcpSocket:
            port: 80
          timeoutSeconds: 1
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 0
          periodSeconds: 5
          tcpSocket:
            port: 80
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /usr/src/paperless/consume
          name: consume
        - mountPath: /data
          name: data
        - mountPath: /usr/src/paperless/export
          name: export
        - mountPath: /media
          name: media
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      volumes:
      - name: consume
        nfs:
          path: /mnt/Volume1/document/consume
          server: 192.168.10.10
      - name: data
        nfs:
          path: /mnt/Volume1/document/data
          server: 192.168.10.10
      - name: export
        nfs:
          path: /mnt/Volume1/document/export
          server: 192.168.10.10
      - name: media
        nfs:
          path: /mnt/Volume1/document/media
          server: 192.168.10.10
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: dokumente.k3s.home.lan
  labels:
    app.kubernetes.io/instance: paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless
    helm.sh/chart: app-template-0.2.1
    helm.toolkit.fluxcd.io/name: paperless
    helm.toolkit.fluxcd.io/namespace: document
  name: paperless
spec:
  ingressClassName: nginx
  rules:
  - host: dokumente.k3s.home.lan
    http:
      paths:
      - backend:
          service:
            name: paperless
            port:
              number: 80
        path: /
        pathType: Prefix

